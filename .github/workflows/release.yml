# .github/workflows/release-central.yml
name: Release — Maven Central (JReleaser)

on:
  push:
    tags: ['v*']          # ej: v1.0.0
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # para crear el GitHub Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Diagnóstico rápido
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradlew || true
          ls -la gradle/wrapper || true

      # (Opcional) Si tu proyecto está en subcarpeta, añade:
      # working-directory: ./subcarpeta en los pasos "run"

      - name: Bootstrap wrapper si falta
        run: |
          if [ ! -f gradlew ]; then
            sudo apt-get update && sudo apt-get install -y gradle
            gradle wrapper --gradle-version 8.4 --distribution-type bin
            chmod +x gradlew
          fi

      - name: Hacer ejecutable la wrapper
        run: chmod +x ./gradlew

      - name: Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache de Gradle
        uses: gradle/actions/setup-gradle@v3

      # 🔐 Genera clave GPG efímera y la expone como variables de entorno
      - name: Generar clave GPG efímera (firma en memoria)
        run: |
          set -euo pipefail
          GPG_NAME="CI Ephemeral Key"
          GPG_EMAIL="ci@julimax.local"
          PASSPHRASE="$(openssl rand -hex 16)"

          cat > genkey <<EOF
          %echo Generating CI key
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: ${GPG_NAME}
          Name-Email: ${GPG_EMAIL}
          Expire-Date: 0
          Passphrase: ${PASSPHRASE}
          %commit
          %echo done
          EOF

          gpg --batch --pinentry-mode loopback --passphrase "${PASSPHRASE}" --generate-key genkey
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')
          gpg --armor --export "${KEYID}" > public.asc
          gpg --armor --export-secret-keys "${KEYID}" > private.asc

          # Gradle signing plugin (firma en memoria)
          printf "SIGNING_KEY<<'EOF'\n%s\nEOF\n" "$(cat private.asc)" >> "$GITHUB_ENV"
          echo "SIGNING_PASSPHRASE=${PASSPHRASE}" >> "$GITHUB_ENV"

          # JReleaser (si decide firmar/validar también)
          printf "JRELEASER_GPG_PUBLIC_KEY<<'EOF'\n%s\nEOF\n"  "$(cat public.asc)"  >> "$GITHUB_ENV"
          printf "JRELEASER_GPG_SECRET_KEY<<'EOF'\n%s\nEOF\n"  "$(cat private.asc)" >> "$GITHUB_ENV"
          echo "JRELEASER_GPG_PASSPHRASE=${PASSPHRASE}" >> "$GITHUB_ENV"

      # (Opcional) Evita publicar SNAPSHOT
      - name: Verificar versión (no SNAPSHOT)
        run: |
          VER=$(./gradlew -q properties | awk -F': ' '/^version: /{print $2; exit}')
          echo "Versión: $VER"
          echo "$VER" | grep -qi SNAPSHOT && { echo "SNAPSHOT no permitido en Central"; exit 1; }

      # Build + docs (Dokka) + validación local
      - name: Build + Dokka + publishToMavenLocal
        run: ./gradlew --no-daemon clean build dokkaJavadoc javadocJar publishToMavenLocal

      # 🚀 Publica en Maven Central y crea GitHub Release
      - name: JReleaser — Full Release (Central + GitHub Release)
        env:
          # Credenciales del Central Publisher Portal
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          # Token para crear el GitHub Release
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: ./gradlew -Prelease --no-daemon jreleaserFullRelease

      - name: Subir logs (si falla)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            **/build/reports/**
            **/build/test-results/**
          if-no-files-found: ignore
          retention-days: 7
