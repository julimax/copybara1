# .github/workflows/release-central.yml
name: Release ‚Äî Maven Central (JReleaser)

on:
  push:
    tags: ['v*']          # ej: v1.0.0
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # necesario para crear el GitHub Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Diagn√≥stico r√°pido
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradlew || true
          ls -la gradle/wrapper || true

      # (Opcional) Si tu proyecto est√° en subcarpeta, a√±ade 'working-directory' en los pasos 'run'

      - name: Bootstrap wrapper si falta
        run: |
          set -euo pipefail
          if [ ! -f gradlew ]; then
            sudo apt-get update && sudo apt-get install -y gradle
            gradle wrapper --gradle-version 8.4 --distribution-type bin
            chmod +x gradlew
          fi

      - name: Hacer ejecutable la wrapper
        run: chmod +x ./gradlew

      - name: Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache de Gradle
        uses: gradle/actions/setup-gradle@v3

      # üîß GPG en modo loopback (evita TTY/prompt del agente)
      - name: Configurar GPG (loopback)
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          echo 'pinentry-mode loopback'  > ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent

      # üîê Genera clave GPG ef√≠mera y la exporta al entorno (sin comillas en EOF)
      - name: Generar clave GPG ef√≠mera (firma en memoria)
        run: |
          set -euo pipefail
          GPG_NAME="CI Ephemeral Key"
          GPG_EMAIL="ci@julimax.local"
          PASSPHRASE="$(openssl rand -hex 16)"

          cat > genkey <<EOF
          %echo Generating CI key
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: ${GPG_NAME}
          Name-Email: ${GPG_EMAIL}
          Expire-Date: 0
          Passphrase: ${PASSPHRASE}
          %commit
          %echo done
          EOF

          gpg --batch --pinentry-mode loopback --passphrase "${PASSPHRASE}" --generate-key genkey

          # Obtener KEYID (campo 5 de 'sec:' con --with-colons)
          KEYID="$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')"
          echo "KEYID=${KEYID}"

          # Exportar PUBLICA y PRIVADA (loopback + passphrase)
          gpg --armor --export "${KEYID}" > public.asc
          gpg --batch --pinentry-mode loopback --passphrase "${PASSPHRASE}" \
              --armor --export-secret-keys "${KEYID}" > private.asc

          # Delimitadores √∫nicos para $GITHUB_ENV
          PRIV_DELIM="GPG_PRIVATE_KEY_$(date +%s)_$$"
          PUB_DELIM="GPG_PUBLIC_KEY_$(date +%s)_$$"

          # Gradle signing plugin (firma en memoria) ‚Äî multiline env
          echo "SIGNING_KEY<<${PRIV_DELIM}" >> "$GITHUB_ENV"
          cat private.asc >> "$GITHUB_ENV"
          echo "${PRIV_DELIM}" >> "$GITHUB_ENV"
          echo "SIGNING_PASSPHRASE=${PASSPHRASE}" >> "$GITHUB_ENV"

          # JReleaser (si valida/firma tambi√©n) ‚Äî multiline env
          echo "JRELEASER_GPG_PUBLIC_KEY<<${PUB_DELIM}" >> "$GITHUB_ENV"
          cat public.asc >> "$GITHUB_ENV"
          echo "${PUB_DELIM}" >> "$GITHUB_ENV"

          echo "JRELEASER_GPG_SECRET_KEY<<${PRIV_DELIM}" >> "$GITHUB_ENV"
          cat private.asc >> "$GITHUB_ENV"
          echo "${PRIV_DELIM}" >> "$GITHUB_ENV"

          echo "JRELEASER_GPG_PASSPHRASE=${PASSPHRASE}" >> "$GITHUB_ENV"

      # (Opcional) Evitar SNAPSHOT en Central
      - name: Verificar versi√≥n (no SNAPSHOT)
        shell: bash
        run: |
            set -euo pipefail
            VER="$(./gradlew -q properties | sed -n 's/^version: //p' | head -n1)"
            echo "Versi√≥n: $VER"
            # usa here-string para no crear pipeline (y no gatillar pipefail)
            if grep -qi -- '-SNAPSHOT$' <<< "$VER"; then
            echo "SNAPSHOT no permitido en Central"
            exit 1
            fi

      # Build + dokka + validaci√≥n local
      - name: Build + Dokka + publishToMavenLocal
        run: ./gradlew --no-daemon clean build dokkaJavadoc javadocJar publishToMavenLocal

      # üöÄ Publica en Maven Central y crea GitHub Release
      - name: JReleaser ‚Äî Full Release (Central + GitHub Release)
        env:
          # Credenciales del Central Publisher Portal (Sonatype)
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          # Token para crear el GitHub Release (puede ser el GITHUB_TOKEN por defecto)
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew -Prelease --no-daemon jreleaserFullRelease

      - name: Subir logs (si falla)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            **/build/reports/**
            **/build/test-results/**
          if-no-files-found: ignore
          retention-days: 7
