# .github/workflows/release-central.yml
name: Release — Maven Central (JReleaser)

on:
  push:
    tags: ['v*']          # ej: v1.0.0
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # necesario para crear el GitHub Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true


      - name: Hacer ejecutable la wrapper
        run: chmod +x ./gradlew

      - name: Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache de Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cargar clave PGP 
        env:
          PGP_PRIVATE: ${{ secrets.SIGNING_KEY }}          # contenido de private.asc
          PGP_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
        run: |
          set -euo pipefail
          KEY_FILE="$RUNNER_TEMP/pgp-private.asc"
          printf '%s' "$PGP_PRIVATE" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          echo "SIGNING_KEY_FILE=$KEY_FILE" >> "$GITHUB_ENV"   # <-- este nombre
          echo "SIGNING_PASSPHRASE=$PGP_PASSPHRASE" >> "$GITHUB_ENV"
      
      
      # Build + dokka + stage (publish)
      - name: Build + Dokka + stage (publish)
        run: ./gradlew --no-daemon clean build dokkaJavadoc javadocJar publishMavenPublicationToStagingRepository --scan

      # 🔍 Verificar artefactos en staging antes de JReleaser
      - name: Verify Staging Artifacts
        run: |
          echo "=== Verificando artefactos en staging ==="
          if [ -d "build/staging-deploy" ]; then
            find build/staging-deploy -name "*.jar" -o -name "*.pom" | head -10
            echo "📄 Archivos encontrados:"
            ls -la build/staging-deploy/io/github/julimax/copybara/1.0.6/ 2>/dev/null || echo "⚠️  Directorio de versión no encontrado"
          else
            echo "❌ Directorio staging-deploy no existe"
            exit 1
          fi

      # 🚀 Subir artifacts a Maven Central usando HTTP directo
      - name: Upload to Maven Central via HTTP
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          set -e
          
          # Configuración
          NAMESPACE="io.github.julimax"
          PROJECT_NAME="copybara"
          VERSION="1.0.6"
          BASE_URL="https://central.sonatype.com/api/v1/publisher"
          
          echo "🚀 Subiendo artifacts a Maven Central..."
          echo "   Namespace: $NAMESPACE"
          echo "   Project: $PROJECT_NAME"
          echo "   Version: $VERSION"
          
          # Verificar que existan los artifacts
          JAR_FILE="build/libs/${PROJECT_NAME}-${VERSION}.jar"
          POM_FILE="build/publications/maven/pom-default.xml"
          
          if [[ ! -f "$JAR_FILE" ]]; then
            echo "❌ Error: No se encontró el JAR: $JAR_FILE"
            exit 1
          fi
          
          if [[ ! -f "$POM_FILE" ]]; then
            echo "❌ Error: No se encontró el POM: $POM_FILE"
            exit 1
          fi
          
          echo "✅ Artifacts encontrados:"
          echo "   JAR: $JAR_FILE ($(du -h $JAR_FILE | cut -f1))"
          echo "   POM: $POM_FILE ($(du -h $POM_FILE | cut -f1))"
          
          # Crear bundle temporal
          BUNDLE_DIR="build/maven-central-bundle"
          mkdir -p "$BUNDLE_DIR"
          
          # Copiar artifacts al bundle con nombres correctos
          cp "$JAR_FILE" "$BUNDLE_DIR/${PROJECT_NAME}-${VERSION}.jar"
          cp "$POM_FILE" "$BUNDLE_DIR/${PROJECT_NAME}-${VERSION}.pom"
          
          # Crear el bundle ZIP
          BUNDLE_FILE="build/${PROJECT_NAME}-${VERSION}-bundle.zip"
          cd "$BUNDLE_DIR"
          zip -r "../$(basename "$BUNDLE_FILE")" .
          cd - > /dev/null
          
          echo "📦 Bundle creado: $BUNDLE_FILE ($(du -h $BUNDLE_FILE | cut -f1))"
          
          # Subir el bundle
          echo "📤 Subiendo bundle a Maven Central..."
          
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            "$BASE_URL/upload" \
            -H "Authorization: Bearer $OSSRH_PASSWORD" \
            -F "bundle=@$BUNDLE_FILE" \
            -F "name=$PROJECT_NAME" \
            -F "namespace=$NAMESPACE")
          
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPLOAD_RESPONSE" | head -n -1)
          
          echo "📋 Código HTTP: $HTTP_CODE"
          echo "📋 Respuesta: $RESPONSE_BODY"
          
          if [[ "$HTTP_CODE" == "201" ]]; then
            echo "✅ Bundle subido exitosamente a Maven Central"
            
            # Extraer deployment ID si está disponible
            if command -v jq >/dev/null 2>&1; then
              DEPLOYMENT_ID=$(echo "$RESPONSE_BODY" | jq -r '.deploymentId // empty' 2>/dev/null)
              if [[ -n "$DEPLOYMENT_ID" ]]; then
                echo "🆔 Deployment ID: $DEPLOYMENT_ID"
                echo "🔗 Puedes verificar el estado en: https://central.sonatype.com/publishing/deployments"
              fi
            fi
          else
            echo "❌ Error al subir bundle. Código HTTP: $HTTP_CODE"
            echo "📋 Respuesta completa: $RESPONSE_BODY"
            exit 1
          fi
          
      # 🏷️ Crear GitHub Release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          VERSION="1.0.6"
          TAG_NAME="v$VERSION"
          
          echo "🏷️ Creando GitHub Release..."
          
          # Crear el release
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "Release $TAG_NAME - Copybara Kotlin Hello World Application" \
            --target "$GITHUB_SHA" \
            build/libs/copybara-$VERSION.jar

      # 📊 Mostrar logs de build scan después de publicar en Maven Central
      - name: Show Build Scan Logs
        if: always()
        run: |
          echo "=== Gradle Build Scan Logs ==="
          if [ -d "$RUNNER_TEMP/.gradle-actions/build-scans" ]; then
            find "$RUNNER_TEMP/.gradle-actions/build-scans" -name "*.json" 2>/dev/null | while read file; do
              echo "📄 Build Scan File: $file"
              if command -v jq >/dev/null 2>&1; then
                cat "$file" | jq '.' 2>/dev/null || cat "$file"
              else
                cat "$file"
              fi
              echo "---"
            done
          else
            echo "⚠️  Build scan directory not found at $RUNNER_TEMP/.gradle-actions/build-scans"
          fi
          
          echo "=== Alternative locations ==="
          find "$RUNNER_TEMP" -name "*build-scan*" -o -name "*.gradle-actions*" 2>/dev/null | head -10

      
      # 📊 Mostrar logs de build results después de publicar en Maven Central
      - name: Show Build Results Logs
        if: always()
        run: |
          echo "=== Gradle Build Results Logs ==="
          if [ -d "$RUNNER_TEMP/.gradle-actions/build-results" ]; then
            find "$RUNNER_TEMP/.gradle-actions/build-results" -name "*.json" 2>/dev/null | while read file; do
              echo "📄 Build Results File: $file"
              if command -v jq >/dev/null 2>&1; then
                cat "$file" | jq '.' 2>/dev/null || cat "$file"
              else
                cat "$file"
              fi
              echo "---"
            done
          else
            echo "⚠️  Build results directory not found at $RUNNER_TEMP/.gradle-actions/build-results"
          fi
          
          echo "=== Alternative locations ==="
          find "$RUNNER_TEMP" -name "*build-results*" -o -name "*.gradle-actions*" 2>/dev/null | head -10

      # 🔍 Mostrar logs detallados de JReleaser
      - name: Show JReleaser Logs
        if: always()
        run: |
          echo "=== JReleaser Logs ==="
          if [ -d "build/jreleaser" ]; then
            find build/jreleaser -name "*.log" -o -name "*.txt" | while read file; do
              echo "📄 JReleaser Log: $file"
              cat "$file"
              echo "---"
            done
          else
            echo "⚠️  JReleaser build directory not found"
          fi
          
          echo "=== Gradle Daemon Logs (últimas líneas) ==="
          find ~/.gradle/daemon -name "*.log" 2>/dev/null | head -1 | while read file; do
            echo "📄 Daemon Log: $file"
            tail -100 "$file"
          done