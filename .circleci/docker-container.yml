version: 2.1

parameters:
  copybara_tag:
    type: string
    default: "v20250818"

jobs:
  check-connection:
    machine: true
    resource_class: org-test-copybara/test
    environment:
      CONTAINER_IMAGE: "copybara-simple:latest" # imagen con Copybara pre-compilado
      COPYBARA_TAG: << pipeline.parameters.copybara_tag >>
    steps:
      - checkout
      - run:
          name: Check env vars
          command: |
            echo "=== Environment Variables Debug ==="
            echo "GH_PAT is set: $([ -n "$GH_PAT" ] && echo 'YES' || echo 'NO')"
            echo "COPYBARA_TAG: $COPYBARA_TAG"
      - run:
          name: Docker diagnostics and setup
          command: |
            echo "=== Docker Diagnostics ==="
            echo "Current user: $(whoami)"
            echo "User groups: $(groups)"
            echo "Docker socket: $(ls -la /var/run/docker.sock 2>/dev/null || echo 'Not found')"
            echo "Docker service status: $(systemctl is-active docker 2>/dev/null || echo 'Unknown')"
            echo "Testing Docker access..."
            if docker version >/dev/null 2>&1; then
              echo "✅ Docker access successful"
            else
              echo "❌ Docker access failed"
              echo "Attempting to fix permissions..."
              # Try to add user to docker group (if not already)
              if ! groups | grep -q docker; then
                echo "User not in docker group. This needs to be fixed on the runner."
              fi
              # Check if we can modify socket permissions
              if [ -w /var/run/docker.sock ]; then
                echo "Socket is writable, continuing..."
              else
                echo "Socket is not writable. Checking if we can fix it..."
                chmod 666 /var/run/docker.sock 2>/dev/null && echo "Fixed socket permissions" || echo "Cannot fix socket permissions"
              fi
            fi
      - run:
          name: Check GitHub Cloud (in-container)
          command: |
            docker run --rm \
              -e GH_PAT -e COPYBARA_TAG \
              -v "$PWD":/workspace -w /workspace \
              "$CONTAINER_IMAGE" bash -lc '
                set -euo pipefail
                URL="https://api.github.com/repos/julimax/copybara2"
                code=$(curl -sS -D /tmp/h -o /tmp/b -w "%{http_code}" \
                  -H "Authorization: Bearer ${GH_PAT}" \
                  -H "Accept: application/vnd.github+json" "$URL")
                echo "== Headers =="; cat /tmp/h
                echo "== Body =="; (jq . /tmp/b || cat /tmp/b)
                echo "HTTP $code"
                test "${code:0:1}" = "2"
              ' 
      - run:
          name: Check GitHub Enterprise (in-container)
          command: |
            docker run --rm \
              -e GH_PAT -e COPYBARA_TAG \
              -v "$PWD":/workspace -w /workspace \
              "$CONTAINER_IMAGE" bash -lc '
                set -euo pipefail
                URL="https://api.github.com/repos/julimax/copybara2"
                code=$(curl -sS --connect-timeout 5 --max-time 15 --retry 3 --retry-delay 2 --retry-all-errors \
                  -D /tmp/h -o /tmp/b -w "%{http_code}" \
                  -H "Authorization: Bearer ${GH_PAT}" \
                  -H "Accept: application/vnd.github+json" "$URL")
                echo "== Headers =="; cat /tmp/h
                echo "== Body =="; (jq . /tmp/b || cat /tmp/b)
                echo "HTTP $code"
                test "${code:0:1}" = "2"
              '

  sync:
    machine: true
    resource_class: org-test-copybara/test
    environment:
      CONTAINER_IMAGE: "copybara-simple:latest" # imagen con Copybara pre-compilado
      COPYBARA_TAG: << pipeline.parameters.copybara_tag >>
    steps:
      - checkout
      - run:
          name: Docker diagnostics and setup
          command: |
            echo "=== Docker Diagnostics ==="
            echo "Current user: $(whoami)"
            echo "User groups: $(groups)"
            echo "Docker socket: $(ls -la /var/run/docker.sock 2>/dev/null || echo 'Not found')"
            echo "Docker service status: $(systemctl is-active docker 2>/dev/null || echo 'Unknown')"
            echo "Testing Docker access..."
            if docker version >/dev/null 2>&1; then
              echo "✅ Docker access successful"
            else
              echo "❌ Docker access failed"
              echo "Attempting to fix permissions..."
              # Try to add user to docker group (if not already)
              if ! groups | grep -q docker; then
                echo "User not in docker group. This needs to be fixed on the runner."
              fi
              # Check if we can modify socket permissions
              if [ -w /var/run/docker.sock ]; then
                echo "Socket is writable, continuing..."
              else
                echo "Socket is not writable. Checking if we can fix it..."
                chmod 666 /var/run/docker.sock 2>/dev/null && echo "Fixed socket permissions" || echo "Cannot fix socket permissions"
              fi
            fi
      - run:
          name: Run Copybara (in-container)
          command: |
            docker run --rm \
              -e GH_PAT="${GH_PAT}" \
              -e DEPLOY_KEY_B64="${DEPLOY_KEY_B64}" \
              -v "$PWD":/workspace -w /workspace \
              "$CONTAINER_IMAGE" bash -lc '
                set -euo pipefail
                # Configurar SSH desde variable de entorno (como sync.yml)
                mkdir -p /home/circleci/.ssh
                echo "$DEPLOY_KEY_B64" | base64 -d > /home/circleci/.ssh/id_ed25519
                sed -i "s/\r$//" /home/circleci/.ssh/id_ed25519
                chmod 700 /home/circleci/.ssh
                chmod 600 /home/circleci/.ssh/id_ed25519
                ssh-keyscan github.com >> /home/circleci/.ssh/known_hosts
                # Configurar Git (como sync.yml)
                git config --global user.name "Julimax"
                git config --global user.email "julimax951@gmail.com"
                # Copybara ya está pre-compilado en la imagen (JAR deploy)
                copybara .circleci/copybara/copy.bara.sky sync_to_dest
              '

workflows:
  build-workflow:
    jobs:
      - check-connection
      - sync:
          requires:
            - check-connection