# Repo B â€” .circleci/config.yml
version: 2.1

parameters:
  message:
    type: string
    default: "Hello World"

jobs:
  print:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Who triggered me?
          command: |
            sudo apt-get update -y && sudo apt-get install -y jq
            curl -sS -H "Circle-Token: ${CIRCLE_TOKEN}" \
              "https://circleci.com/api/v2/pipeline/${CIRCLE_PIPELINE_ID}" \
            | jq -r '"actor=\(.trigger.actor.login) type=\(.trigger.type) created_at=\(.created_at)"'
      - run:
          name: Print message
          command: echo "<< pipeline.parameters.message >>"
          
      - run:
          name: Print Logs
          command: |
            # 1) Get latest pipeline id of A
            echo "get pipeline id"
            PIPE_ID=$(curl -s -H "Circle-Token: $CIRCLE_TOKEN" \
              "https://circleci.com/api/v2/project/circleci/2d9dcac2-9735-4929-b3d2-bb133465bc4d/55d9b29f-731e-40df-8c77-170ec5493e4b/pipeline?branch=main" \
              | jq -r '.items[0].id')
            echo "PIPE_ID=$PIPE_ID"
            
            # 2) Get workflow id
            echo "get workflow id"
            WF_ID=$(curl -s -H "Circle-Token: $CIRCLE_TOKEN" \
              "https://circleci.com/api/v2/pipeline/$PIPE_ID/workflow" \
              | jq -r '.items[0].id')
            echo "WF_ID=$WF_ID"
            
            # 3) Get a job that actually has a job_number
            echo "get job number"
            JOB_NUM=$(curl -s -H "Circle-Token: $CIRCLE_TOKEN" \
              "https://circleci.com/api/v2/workflow/$WF_ID/job" \
              | jq -r '.items[] | select(.job_number != null) | .job_number' | head -n1)
            echo "JOB_NUM=$JOB_NUM"
            
            # 4) List available steps (v1.1). If jq fails, print raw response for debugging.
            echo "available steps:"
            RESP=$(curl -s -H "Circle-Token: $CIRCLE_TOKEN" \
              "https://circleci.com/api/v1.1/project/github/julimax/copybara1/$JOB_NUM" \
              || true)
            echo "$RESP" | jq -r '.steps[].name' || { echo "Raw response:"; echo "$RESP"; exit 1; }
            
            # 5) Pick step by a simple case-insensitive pattern and print its log
            STEP_PATTERN="Previous echo"  # <-- change to match a name you saw listed above
            OUTPUT_URL=$(echo "$RESP" | jq -r --arg pat "$STEP_PATTERN" '
              .steps[] | select(.name | test($pat; "i")) | .actions[] | select(.output_url != null) | .output_url
            ' | head -n1)
            
            if [ -z "$OUTPUT_URL" ]; then
              echo "No step matched pattern: $STEP_PATTERN (or step has no output_url)."
              exit 0
            fi
            
            # Some output URLs require token in query param; try header first, then query
            curl -s -H "Circle-Token: $CIRCLE_TOKEN" "$OUTPUT_URL" \
              | jq -r '.[].message // .[].out // empty' \
              || curl -s "${OUTPUT_URL}?circle-token=${CIRCLE_TOKEN}" \
                 | jq -r '.[].message // .[].out // empty'




workflows:
  example:
    jobs:
      - print
